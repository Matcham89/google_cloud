resource "google_service_account" "kubernetes" {
    account_id = var.k8s_svca
    display_name = var.k8s_svca
}


#control plane configuration
resource "google_container_cluster" "cluster_id" {
    name = var.k8scluster
    location = var.subregion
    remove_default_node_pool = true
    initial_node_count = 1
    network = var.vpc
    subnetwork = var.subnet
    logging_service = "logging.googleapis.com/kubernetes"
    monitoring_service = "monitoring.googleapis.com/kubernetes"
    networking_mode = "VPC_NATIVE"


    depends_on = [
      google_compute_network.vpc_webapp
    ]

    #additional zonal location
    node_locations = [
        var.nodelocations
    ]
    addons_config {
        http_load_balancing {
            disabled = true
        }
        horizontal_pod_autoscaling {
            disabled = false
        }
    }
    release_channel {
        channel = "REGULAR"
    }
    
    workload_identity_config {
        workload_pool = "${var.project}.svc.id.goog"
    }

    ip_allocation_policy {
        cluster_secondary_range_name = "k8s-pod-range"
        services_secondary_range_name = "k8s-service-range"
    }
    
    private_cluster_config {
        enable_private_nodes = true
        enable_private_endpoint = false
        master_ipv4_cidr_block = "172.16.0.0/28"
    }
}

################
# NODE CONFIG #
################

 
resource "google_container_node_pool" "asuna" {
    name = var.k8snode1
    cluster = google_container_cluster.cluster_id.id
    node_count = 1

    management {
    auto_repair = true
    auto_upgrade = true
    }


    node_config {
    preemptible = false
    machine_type = var.k8snode_machine
    

    service_account = google_service_account.kubernetes.email
    oauth_scopes = [ "https://www.googleapis.com/auth/cloud-platform" ]

    }
    depends_on = [
      google_container_cluster.cluster_id
    ]
}

resource "google_container_node_pool" "kirito" {
    name = var.k8snode2
    cluster = google_container_cluster.cluster_id.id

    management {
        auto_repair = true
        auto_upgrade = true
        }

  autoscaling {
        min_node_count = var.min_node_count
        max_node_count = var.max_node_count
        }
    
    #ideal for pipeline
    node_config {
        preemptible = true
        machine_type = var.k8snode_machine

           

    #taint {
     #   key = "instance_type"
      #  value = "asuna"
       # effect = "NO_SCHEDULE"
     #   }
    #
    service_account = google_service_account.kubernetes.email
    oauth_scopes = [ "https://www.googleapis.com/auth/cloud-platform" ]
    }
    depends_on = [
      google_container_cluster.cluster_id
    ]
}